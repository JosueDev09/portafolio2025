---
import { getCollection } from 'astro:content';
import './skills.css';

// Obtener todas las colecciones de skills desde los archivos MD
const backendSkills = await getCollection('backend-skills');
const frontendSkills = await getCollection('frontend-skills');  
const toolsSkills = await getCollection('tools-skills');

// Definir tipo para los skills
interface SkillData {
  title: string;
  level: string;
  img: string;
}
---

<section
  id="habilidades" 
  class="bg-gray-900 text-white py-16 px-6 min-h-screen flex items-center"
>
  <div class="max-w-7xl mx-auto w-full">
    
    <!-- T√≠tulo de la secci√≥n -->
    <div class="text-center mb-16">
      <h2 class="text-4xl lg:text-5xl font-bold mb-4 bg-gradient-to-r from-blue-400 via-purple-500 to-cyan-400 bg-clip-text text-transparent">
        Mis Habilidades
      </h2>
      <p class="text-xl text-gray-300 max-w-2xl mx-auto">
        Tecnolog√≠as y herramientas que domino para crear experiencias digitales excepcionales
      </p>
    </div>

    <!-- Grid de categor√≠as de habilidades -->
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-8 mb-12">
      
      <!-- Frontend -->
      <div class="skill-category" data-category="frontend">
        <div class="skill-header">
          <div class="skill-icon frontend-icon">
            <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"/>
            </svg>
          </div>
          <h3 class="text-2xl font-bold text-blue-400 mb-4">Frontend</h3>
        </div>
        
        <div class="skills-grid">
          {frontendSkills.map((skill) => (
            <div class="skill-item" data-level={skill.data.level.replace('%', '')}>
              <div class="skill-content">
                <img src={skill.data.img} alt={skill.data.title} class="skill-logo">
                <span class="skill-name">{skill.data.title}</span>
              </div>
              <div class="skill-bar">
                <div class="skill-progress" style={`width: ${skill.data.level}`}></div>
              </div>
              <span class="text-gray-400">{skill.data.level}</span>
            </div>
          ))}
        </div>
      </div>

      <div class="skill-category" data-category="backend">
        <div class="skill-header">
          <div class="skill-icon backend-icon">
            <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 12h14M5 12a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v4a2 2 0 01-2 2M5 12a2 2 0 00-2 2v4a2 2 0 002 2h14a2 2 0 002-2v-4a2 2 0 00-2-2m-2-4h.01M17 16h.01"/>
            </svg>
          </div>
          <h3 class="text-2xl font-bold text-green-400 mb-4">Backend</h3>
        </div>
        
        <div class="skills-grid">
          {backendSkills.map((skill) => (
            <div class="skill-item" data-level={skill.data.level.replace('%', '')}>
              <div class="skill-content">
                <img src={skill.data.img} alt={skill.data.title} class="skill-logo">
                <span class="skill-name">{skill.data.title}</span>
              </div>
              <div class="skill-bar">
                <div class="skill-progress" style={`width: ${skill.data.level}`}></div>
              </div>
              <span class="text-gray-400">{skill.data.level}</span>
            </div>
          ))}
        </div>
      </div>

  
      <div class="skill-category" data-category="tools">
        <div class="skill-header">
          <div class="skill-icon tools-icon">
            <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"/>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
            </svg>
          </div>
          <h3 class="text-2xl font-bold text-purple-400 mb-4">Herramientas</h3>
        </div>
        
        <div class="skills-grid">
          {toolsSkills.map((skill) => (
            <div class="skill-item" data-level={skill.data.level.replace('%', '')}>
              <div class="skill-content">
                <img src={skill.data.img} alt={skill.data.title} class="skill-logo">
                <span class="skill-name">{skill.data.title}</span>
              </div>
              <div class="skill-bar">
                <div class="skill-progress" style={`width: ${skill.data.level}`}></div>
              </div>
              <span class="text-gray-400">{skill.data.level}</span>
            </div>
          ))}
        </div>
      </div>
    </div>

   
    <div class="text-center">
      <h3 class="text-3xl font-bold mb-8 bg-gradient-to-r from-cyan-400 to-blue-500 bg-clip-text text-transparent">
        Servicios que Ofrezco
      </h3>
      
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <div class="service-card">
          <div class="service-icon web-dev">
            <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4"/>
            </svg>
          </div>
          <h4 class="text-lg font-semibold mb-2">Desarrollo Web</h4>
          <p class="text-gray-400 text-sm">Aplicaciones web modernas y responsivas</p>
        </div>

        <div class="service-card">
          <div class="service-icon ui-ux">
            <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zM21 5a2 2 0 00-2-2h-4a2 2 0 00-2 2v12a4 4 0 004 4h4a2 2 0 002-2V5z"/>
            </svg>
          </div>
          <h4 class="text-lg font-semibold mb-2">UI/UX Design</h4>
          <p class="text-gray-400 text-sm">Interfaces atractivas y funcionales</p>
        </div>

        <div class="service-card">
          <div class="service-icon api-dev">
            <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/>
            </svg>
          </div>
          <h4 class="text-lg font-semibold mb-2">APIs REST</h4>
          <p class="text-gray-400 text-sm">Desarrollo de servicios backend</p>
        </div>

        <div class="service-card">
          <div class="service-icon consulting">
            <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"/>
            </svg>
          </div>
          <h4 class="text-lg font-semibold mb-2">Consultor√≠a</h4>
          <p class="text-gray-400 text-sm">Asesoramiento t√©cnico y arquitectura</p>
        </div>
      </div>
    </div>
    </div>
</section>

<script>
  // üéØ SKILLS ANIMATION CONTROL
  document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ Skills section cargado');
    
    // Intersection Observer para animaciones
    const observerOptions = {
      threshold: 0.1,
      rootMargin: '0px 0px -100px 0px'
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const element = entry.target;
          
          // Animar categor√≠as de skills
          if (element.classList.contains('skill-category')) {
            element.classList.add('animate-in');
            
            // Animar barras de progreso despu√©s de un delay
            setTimeout(() => {
              const skillItems = element.querySelectorAll('.skill-item');
              skillItems.forEach((item, index) => {
                setTimeout(() => {
                  item.classList.add('animate-progress');
                }, index * 100);
              });
            }, 300);
          }
          
          // Animar service cards
          if (element.classList.contains('service-card')) {
            setTimeout(() => {
              element.classList.add('animate-in');
            }, Math.random() * 200);
          }
        }
      });
    }, observerOptions);

    // Observar elementos
    document.querySelectorAll('.skill-category, .service-card').forEach(el => {
      observer.observe(el);
    });

    // Hover effects para skill items
    document.querySelectorAll('.skill-item').forEach(item => {
      let tooltip: HTMLElement | null = null;
      
      item.addEventListener('mouseenter', () => {
        // Evitar crear m√∫ltiples tooltips
        if (tooltip) return;
        
        const level = item.getAttribute('data-level');
        tooltip = document.createElement('div');
        tooltip.className = 'skill-tooltip';
        tooltip.textContent = `${level}%`;
        (item as HTMLElement).style.position = 'relative';
        item.appendChild(tooltip);
      });

      item.addEventListener('mouseleave', () => {
        if (tooltip) {
          tooltip.remove();
          tooltip = null;
        }
      });
    });

    console.log('‚úÖ Skills animations inicializadas');
  });
</script>